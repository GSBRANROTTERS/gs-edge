#include <LiquidCrystal_I2C.h> // Biblioteca para controle do display LCD com interface I2C
#include <EEPROM.h>             // Biblioteca para manipulação da EEPROM

// Definição dos pinos para o sensor de distância (ultrassônico) e LEDs
#define trigPin 7
#define echoPin 6

// Definição dos pinos para LEDs de status e buzzer
#define led0 8    // Verde - Seguro
#define led1 9    // Amarelo - Alerta
#define led2 10   // Vermelho - Alto
#define led3 11   // Roxo - Crítico
#define buzzerPin 12

// Inicializa o display LCD com endereço I2C e tamanho 16x2
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Definição do tamanho da EEPROM e variável para controle de endereço atual
const int EEPROM_SIZE = 1024;
int currentAddress = 0;

// Controle de tempo para gravação de logs e saída serial
unsigned long lastLogTime = 0;
const long logInterval = 1000;
unsigned long lastSerialOutput = 0;
const long serialInterval = 1000;

// Estrutura para armazenar logs de nível de água
struct WaterLog {
  unsigned long timestamp;
  int distance;
  byte status;
};

void setup() {
  Serial.begin(9600);  // Inicia a comunicação serial para debug

  pinMode(trigPin, OUTPUT);  // Define o pino do trigger do sensor como saída
  pinMode(echoPin, INPUT);   // Define o pino do echo do sensor como entrada

  // Define os pinos dos LEDs e do buzzer como saída
  pinMode(led0, OUTPUT);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  lcd.init();  // Inicializa o display LCD
  lcd.backlight();  // Ativa a retroiluminação do LCD
  lcd.setCursor(0, 0);
  lcd.print("   Bem Vindo");
  lcd.setCursor(0, 1);
  lcd.print(" BrainRotters");
  delay(2000);  // Exibe a mensagem inicial por 2 segundos
  lcd.clear();  // Limpa o display

  initializeEEPROM();  // Inicializa a EEPROM

  Serial.println("Sistema de Monitoramento de Nível de Água");
  Serial.println("-----------------------------------------");
}

// Função para inicializar a EEPROM
void initializeEEPROM() {
  if (EEPROM.read(0) != 0x55) {  // Verifica se a EEPROM está inicializada
    EEPROM.write(0, 0x55);       // Inicializa a EEPROM com um valor específico
    EEPROM.write(1, 0);          // Define o endereço inicial
    EEPROM.write(2, 0);
    currentAddress = 3;          // Atualiza o endereço inicial
  } else {
    currentAddress = EEPROM.read(1) | (EEPROM.read(2) << 8);  // Lê o último endereço usado
  }
}

// Função para registrar o nível de água na EEPROM
void logWaterLevel(int distance, byte status) {
  if (millis() - lastLogTime < logInterval) return;  // Evita registrar com frequência muito alta
  lastLogTime = millis();

  WaterLog logEntry = { millis(), distance, status };  // Cria um novo log

  if (currentAddress + sizeof(logEntry) >= EEPROM_SIZE) {  // Verifica se há espaço na EEPROM
    currentAddress = 3;  // Reseta o endereço se não houver mais espaço
  }

  byte* p = (byte*)(void*)&logEntry;  // Converte o log para byte*
  for (unsigned int i = 0; i < sizeof(logEntry); i++) {
    EEPROM.write(currentAddress + i, *p++);  // Escreve o log na EEPROM
  }

  currentAddress += sizeof(logEntry);  // Atualiza o endereço da EEPROM
  EEPROM.write(1, currentAddress & 0xFF);  // Grava o novo endereço na EEPROM
  EEPROM.write(2, (currentAddress >> 8) & 0xFF);

  Serial.print("LOG EEPROM: ");
  printStatus(distance, status);  // Exibe o log no monitor serial
}

// Função para imprimir o status do nível de água
void printStatus(int distance, byte status) {
  Serial.print("Nivel: ");
  Serial.print(distance);
  Serial.print("cm - ");
  switch (status) {  // Exibe o status dependendo da distância
    case 0: Serial.println("NORMAL"); break;
    case 1: Serial.println("ALERTA"); break;
    case 2: Serial.println("ALTO!"); break;
    case 3: Serial.println("CRÍTICO!"); break;
  }
}

// Função para atualizar a saída serial
void updateSerialOutput(int distance, byte status) {
  if (millis() - lastSerialOutput >= serialInterval) {
    lastSerialOutput = millis();
    printStatus(distance, status);  // Exibe o status no monitor serial
  }
}

// Função para ativar o buzzer dependendo do status
void activateBuzzer(byte status) {
  if (status >= 2) {
    tone(buzzerPin, 1000);  // Toca o buzzer se o status for ALERTA ou CRÍTICO
  } else {
    noTone(buzzerPin);  // Desliga o buzzer
  }
}

void loop() {
  digitalWrite(trigPin, LOW);  // Envia um pulso de baixa para o trigPin
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);  // Envia um pulso de alta
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);  // Envia novamente um pulso de baixa

  long duration = pulseIn(echoPin, HIGH, 30000);  // Mede o tempo do eco do sensor
  int distance = (duration > 0) ? (duration / 2) / 29.1 : 999;  // Calcula a distância

  lcd.clear();  // Limpa o LCD
  lcd.setCursor(0, 0);
  lcd.print("Nivel de Agua:");

  byte currentStatus = 0;  // Status inicial
  String statusText = "";

  // Define o status baseado na distância medida
  if (distance >= 45 && distance < 500) {
    digitalWrite(led0, HIGH);  // Acende o LED verde
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
    statusText = "Bom";
    currentStatus = 0;
  }
  else if (distance < 45 && distance > 30) {
    digitalWrite(led0, LOW);
    digitalWrite(led1, HIGH);  // Acende o LED amarelo
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
    statusText = "Alerta!";
    currentStatus = 1;
  }
  else if (distance <= 30 && distance > 15) {
    digitalWrite(led0, LOW);
    digitalWrite(led1, LOW);
    digitalWrite(led2, HIGH);  // Acende o LED vermelho
    digitalWrite(led3, LOW);
    statusText = "Alto! Abaixar!";
    currentStatus = 2;
  }
  else if (distance <= 15) {
    digitalWrite(led0, LOW);
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, HIGH);  // Acende o LED roxo
    statusText = "CRITICO!";
    currentStatus = 3;
  } else {
    statusText = "Erro sensor";
  }

  lcd.setCursor(0, 1);
  lcd.print(statusText);  // Exibe o status no LCD

  activateBuzzer(currentStatus);  // Ativa o buzzer conforme o status
  updateSerialOutput(distance, currentStatus);  // Atualiza a saída serial
  logWaterLevel(distance, currentStatus);  // Registra o nível de água

  delay(800);  // Aguarda 800 ms antes de realizar outra medição
}
